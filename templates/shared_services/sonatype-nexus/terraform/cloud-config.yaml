---
#cloud-config
package_upgrade: true
apt:
  sources:
    docker.list:
      source: deb [arch=amd64]
        https://download.docker.com/linux/ubuntu $RELEASE stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
      keyserver: hkp://keyserver.ubuntu.com:80
    azure-cli.list:
      source: deb [arch=amd64]
        https://packages.microsoft.com/repos/azure-cli/ $RELEASE main
      keyid: BC528686B50D79E339D3721CEB3E94ADBE1229CF
      keyserver: hkp://keyserver.ubuntu.com:80

packages:
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-compose
  - gnupg2
  - pass
  - azure-cli
  - default-jre
  - xmlstarlet

# create the docker group
groups:
  - docker

# Add default auto created user to docker group
system_info:
  default_user:
    groups: [docker]

write_files:
  - path: /etc/cron.hourly/docker-prune
    # An hourly cron job to have docker free disk space. Running this frquently
    # since disk might get full fast, but we prune only when free space is low.
    content: |
      #!/bin/bash
      set -o errexit
      used_percent=$(df / --output=pcent | tail -1 | sed 's/[^0-9]//g')
      echo "Used disk space percent: $${used_percent}"
      if (( used_percent > 60 )); then
        echo "Free space too low, pruning..."
        docker system prune -f
      fi
    permissions: '0755'

  # Configure Nexus to disable default repos
  - path: /etc/nexus-data/etc/nexus.properties
    content: |
      nexus.skipDefaultRepositories=true
    permissions: '0755'

  # Set up Nexus to serve https using SSL cert
  - path: /home/adminuser/configure-nexus-ssl.sh
    content: |
      # Prepare ssl certificate
      az login --identity -u ${msi_id}
      # -- get cert from kv as secret so it contains private key
      echo 'Getting cert and cert password from Keyvault...'
      az keyvault secret download --vault-name ${vault_name} --name ${ssl_cert_name} --file temp.pfx --encoding base64
      CERT_PASSWORD=$(az keyvault secret show --vault-name ${vault_name} --name ${ssl_cert_password_name} -o tsv --query value)
      # -- az cli strips out password from cert which we need to re-add for jks by converting to PEM then back to PFX with pwd
      openssl pkcs12 -in temp.pfx -out temp.pem -nodes -password pass:
      openssl pkcs12 -export -out nexus-ssl.pfx -in temp.pem -password "pass:$CERT_PASSWORD"

      # Import ssl cert to keystore within Nexus volume
      keystore_timeout=300
      echo 'Checking for nexus-data/keystores directory...'
      while [ ! -d /etc/nexus-data/keystores ]; do
        # Wait for /keystore dir to be created by container first
        if [ $keystore_timeout == 0 ]; then
          echo 'ERROR - Timeout while waiting for Nexus to create nexus-data/keystores'
          exit 1
        fi
        sleep 1
        ((keystore_timeout--))
      done
      echo 'Directory found. Importing ssl cert into new keystore at nexus-data/keystores/keystore.jks...'
      keytool -v -importkeystore -srckeystore nexus-ssl.pfx -srcstoretype PKCS12 -destkeystore /etc/nexus-data/keystores/keystore.jks \
        -deststoretype JKS -srcstorepass "$CERT_PASSWORD" -deststorepass "$CERT_PASSWORD"

      # Configure Jetty instance within Nexus to consume ssl cert
      echo 'Modifying Nexus Jetty configuration to enable ssl...'
      mkdir -p /etc/nexus-data/etc/jetty
      # -- we first need to copy the default Jetty config to the persistent volume so it isn't overwritten on restart
      docker exec -u root nexus cp /opt/sonatype/nexus/etc/jetty/jetty-https.xml /nexus-data/etc/jetty/
      # -- then we replace password values with the ssl cert keystore password
      xmlstarlet ed -P --inplace -u "/Configure[@id='Server']/New[@id='sslContextFactory']/Set[@name='KeyStorePassword']" \
        -v "$CERT_PASSWORD" /etc/nexus-data/etc/jetty/jetty-https.xml
      xmlstarlet ed -P --inplace -u "/Configure[@id='Server']/New[@id='sslContextFactory']/Set[@name='KeyManagerPassword']" \
        -v "$CERT_PASSWORD" /etc/nexus-data/etc/jetty/jetty-https.xml
      xmlstarlet ed -P --inplace -u "/Configure[@id='Server']/New[@id='sslContextFactory']/Set[@name='TrustStorePassword']" \
        -v "$CERT_PASSWORD" /etc/nexus-data/etc/jetty/jetty-https.xml
      # -- then update the location of our keystore
      xmlstarlet ed -P --inplace -u "/Configure[@id='Server']/New[@id='sslContextFactory']/Set[@name='KeyStorePath']" \
        -v /nexus-data/keystores/keystore.jks /etc/nexus-data/etc/jetty/jetty-https.xml
      xmlstarlet ed -P --inplace -u "/Configure[@id='Server']/New[@id='sslContextFactory']/Set[@name='TrustStorePath']" \
        -v /nexus-data/keystores/keystore.jks /etc/nexus-data/etc/jetty/jetty-https.xml

      # Add jetty configuration and ssl port to Nexus properties
      cat >> /etc/nexus-data/etc/nexus.properties <<'EOF'
      application-port-ssl=8443
      nexus-args=$${jetty.etc}/jetty.xml,$${jetty.etc}/jetty-http.xml,$${jetty.etc}/jetty-requestlog.xml,/nexus-data/etc/jetty/jetty-https.xml
      EOF

      # Restart the container for changes to take effect
      docker restart nexus
      echo 'Nexus ssl configuration completed.'
    permissions: '0744'

  # Write a script that will reset the admin password for Nexus to the one TF generated
  - path: /home/adminuser/reset-nexus-password.sh
    content: |
      #!/bin/bash
      # Get the current password so we can post to the API
      # (this is created in the /nexus-data mounted volume as part of Nexus container start-up in cloud-init)
      password_timeout=300
      echo 'Checking for Nexus admin password file...'
      while [ ! -f /etc/nexus-data/admin.password ]; do
        # We must first wait for the file to be created
        if [ $password_timeout == 0 ]; then
          echo 'ERROR - Timeout while waiting for nexus-data/admin.password to be created'
          exit 1
        fi
        sleep 1
        ((password_timeout--))
      done
      CURRENT_PASSWORD=$(cat /etc/nexus-data/admin.password)

      # Set our own admin password so we can connect to the Nexus repository manager later on using TF KV secret
      reset_timeout=300
      echo "Nexus default admin password found ($CURRENT_PASSWORD). Resetting..."
      # While the container is starting up it may return a number of transient errors (i.e. connection reset) which we need to retry until operational
      # NOTE: we can't use curl's built-in retry flags as it doesn't catch for the connection reset response
      res=1
      while test "$res" != "0"; do
        curl -ifu admin:$CURRENT_PASSWORD -XPUT -H 'Content-Type:text/plain' --data '${nexus_admin_password}' \
          http://localhost/service/rest/v1/security/users/admin/change-password
        res=$?
        echo "Attempt to reset password finished with code $res"
        if test "$res" == "0"; then
          echo 'Password reset successfully. Admin can now log in with secret stored in KeyVault.'
        else
          if [ $reset_timeout == 0 ]; then
            echo 'ERROR - Timeout while trying to reset Nexus admin password'
            exit 1
          fi
          sleep 5
          ((reset_timeout+=5))
        fi
      done
    permissions: '0744'

runcmd:
  - export DEBIAN_FRONTEND=noninteractive
    # Give the Nexus process write permissions on the folder mounted as persistent volume
  - chown -R 200 /etc/nexus-data
    # Run the nexus container with mapped volume for nexus config
  - docker run -d
      -p 80:8081 -p 443:8443
      -v /etc/nexus-data:/nexus-data
      --restart always
      --name nexus
      --log-driver local
      sonatype/nexus3
  - bash /home/adminuser/reset-nexus-password.sh
  - bash /home/adminuser/configure-nexus-ssl.sh
