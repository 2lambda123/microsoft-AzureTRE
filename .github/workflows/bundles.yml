---
name: Publish Bundles

on:
  push:
    branches: [ross/ActionsInDevContainer]
  workflow_dispatch:

env:
  USE_ENV_VARS_NOT_FILES: true
  DOCKER_BUILDKIT: 1
  TF_INPUT: 0 # No input supplied to Terraform
  TF_IN_AUTOMATION: 1 # No prompts

jobs:
  publish_and_register_bundles:
    name: Register Bundles
    runs-on: ubuntu-latest
    if: |
      github.event.name == 'schedule'
      || github.event_name == 'push'
      || github.event_name == 'workflow_dispatch'
      || contains(github.event.pull_request.labels.*.name, 'safe to test')
    strategy:
      matrix:
        include:
        # bundles type can be inferred from the bundle
        # dir (but this is more explicit)
          - {BUNDLE_TYPE: "workspace",
             BUNDLE_DIR: "./templates/workspaces/base"}
          - {BUNDLE_TYPE: "workspace",
             BUNDLE_DIR: "./templates/workspaces/innereye"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/guacamole"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/azureml"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/devtestlabs"}
          - {BUNDLE_TYPE: "workspace_service",
             BUNDLE_DIR: "./templates/workspace_services/innereye"}
    environment: Dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker BuildKit
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ACTIONS_ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACTIONS_ACR_NAME }}
          password: ${{ secrets.ACTIONS_ACR_PASSWORD }}

      - name: Set Variables
        run: |
          echo "USER_UID=$(id -u)" >> $GITHUB_ENV
          echo "USER_GID=$(id -g)" >> $GITHUB_ENV

      - name: Register bundles
        shell: bash
        env:
          ARM_TENANT_ID: "${{ secrets.ARM_TENANT_ID }}"
          ARM_CLIENT_ID: "${{ secrets.ARM_CLIENT_ID }}"
          ARM_CLIENT_SECRET: "${{ secrets.ARM_CLIENT_SECRET }}"
          ARM_SUBSCRIPTION_ID: "${{ secrets.ARM_SUBSCRIPTION_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          CLIENT_ID: "${{ secrets.TEST_APP_ID }}"
          USERNAME: "${{ secrets.TEST_USER_NAME }}"
          PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          ACR_NAME: ${{ secrets.ACR_NAME }}
          TRE_URL: "https://${{secrets.TRE_ID}}.${{secrets.LOCATION}}.cloudapp.azure.com"
          BUNDLE_TYPE: ${{ matrix.BUNDLE_TYPE }}
        run: |
          docker run --rm --mount \
            "type=bind,src=${{ github.workspace }},dst=/workspaces/tre" \
            -v /var/run/docker.sock:/var/run/docker.sock \
            --workdir /workspaces/tre \
            --user vscode \
            -e TF_IN_AUTOMATION=1 \
            -e ARM_CLIENT_ID \
            -e ARM_CLIENT_SECRET \
            -e ARM_TENANT_ID \
            -e ARM_SUBSCRIPTION_ID \
            -e RESOURCE \
            -e AUTH_TENANT_ID \
            -e CLIENT_ID \
            -e USERNAME \
            -e PASSWORD \
            -e ACR_NAME \
            -e TRE_URL \
            -e BUNDLE_TYPE \
            '${{ secrets.ACTIONS_ACR_NAME }}.azurecr.io/tredev:latest' \
          bash -c "make build-and-register-bundle DIR=${{ matrix.BUNDLE_DIR }}"

  e2e_tests:
    name: "Run E2E Tests"
    runs-on: ubuntu-latest
    environment: Dev
    if: |
      github.event.name == 'schedule'
      || github.event_name == 'push'
      || github.event_name == 'workflow_dispatch'
      || contains(github.event.pull_request.labels.*.name, 'safe to test')
    # needs: [publish_and_register_user_resources]
    needs: [publish_and_register_bundles]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          cd e2e_tests
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt

      - name: Test with pytest
        shell: bash
        env:
          RESOURCE_LOCATION: "${{ secrets.LOCATION }}"
          TRE_ID: "${{ secrets.TRE_ID }}"
          RESOURCE: "${{ secrets.API_CLIENT_ID }}"
          AUTH_TENANT_ID: "${{ secrets.AAD_TENANT_ID }}"
          CLIENT_ID: "${{ secrets.TEST_APP_ID }}"
          USERNAME: "${{ secrets.TEST_USER_NAME }}"
          PASSWORD: "${{ secrets.TEST_USER_PASSWORD }}"
          TEST_WORKSPACE_APP_ID: "${{ secrets.TEST_WORKSPACE_APP_ID }}"
        run: |
          export \
            SCOPE="api://${RESOURCE}/user_impersonation"
          export \
            WORKSPACE_SCOPE="api://${TEST_WORKSPACE_APP_ID}/user_impersonation"
          cd e2e_tests
          PYTHONPATH=. python -m pytest -m smoke --junit-xml pytest_e2e.xml

      - name: Notify dedicated teams channel
        uses: sachinkundu/ms-teams-notification@1.4
        if: ${{ failure() && github.ref == 'refs/heads/main'}}
        continue-on-error: true
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: "E2E Tests failed"
          notification-color: dc3545
          timezone: Europe/Zurich

      - name: Expose workspace id
        shell: bash
        if: always()
        run: |
          cd e2e_tests
          wkspc_id=`cat workspace_id.txt`
          echo "WORKSPACE_ID=$wkspc_id" >> $GITHUB_ENV

      - name: Notify dedicated teams channel
        uses: sachinkundu/ms-teams-notification@1.4
        if: ${{ success() && github.ref == 'refs/heads/main' }}
        continue-on-error: true
        with:
          github-token: ${{ github.token }}
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: "Deployment and tests passed successfully"
          notification-color: 28a745
          timezone: Europe/Zurich

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: E2E Test Results (Python ${{ matrix.python-version }})
          path: "./e2e_tests/pytest_e2e.xml"

      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: "./e2e_tests/pytest_e2e.xml"

  tre_stop:
    name: "Deallocate Resources"
    runs-on: ubuntu-latest
    environment: Dev
    needs: [e2e_tests]
    if: |
      ${{
      always() &&
      github.event.name == 'schedule'
      || github.event_name == 'push'
      || github.event_name == 'workflow_dispatch'
      || contains(github.event.pull_request.labels.*.name, 'safe to test')
      }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deallocate Resources
        shell: bash
        env:
          TRE_ID: "${{secrets.TRE_ID}}"
        run: |
          az extension add --name azure-firewall
          # TODO: enable this once the bug
          # https://github.com/microsoft/AzureTRE/issues/1165 is fixed
          # make tre-stop
